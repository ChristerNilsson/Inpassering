// Generated by CoffeeScript 1.11.1
var Button, Deltagare, buttons, colors, deltagare, draw, mousePressed, persons, rooms, setup, state;

buttons = [];

rooms = ['Scratch 1', 'Scratch 2', 'Python 1', 'Python 2', 'Matematik 1', 'Matematik 2', 'Coffeescript', 'Javascript', 'Unity', 'Cobol'];

colors = [];

deltagare = {};

persons = [];

state = 0;

Deltagare = (function() {
  function Deltagare(namn1, rum, dag) {
    this.namn = namn1;
    this.rum = rum;
    this.dag = dag;
    this.present = false;
  }

  return Deltagare;

})();

Button = (function() {
  function Button(text1, x1, y1, w, h, present, col) {
    this.text = text1;
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.present = present != null ? present : false;
    this.col = col != null ? col : -1;
    this.a = 0;
    this.b = 0;
  }

  Button.prototype.draw = function() {
    var t;
    if (this.b === 0) {
      t = this.text;
    } else {
      t = this.text + (" (" + this.a + " av " + this.b + ")");
    }
    if (this.col === -1) {
      if (this.present) {
        fill(color(255));
        rect(this.x, this.y, this.w, this.h);
        fill(color(0));
        return text(t, this.x, this.y);
      } else {
        fill(color(0));
        rect(this.x, this.y, this.w, this.h);
        fill(color(255));
        return text(t, this.x, this.y);
      }
    } else {
      fill(colors[this.col][1]);
      rect(this.x, this.y, this.w, this.h);
      fill(colors[this.col][0]);
      return text(t, this.x, this.y);
    }
  };

  Button.prototype.pressed = function(x, y) {
    x = x + this.w / 2;
    y = y + this.h / 2;
    return (this.x < x && x < this.x + this.w) && (this.y < y && y < this.y + this.h);
  };

  return Button;

})();

setup = function() {
  var button, i, j, k, l, len, len1, len2, name, ref, ref1, ref2, results, room;
  createCanvas(600, 660);
  noStroke();
  rectMode(CENTER);
  textSize(14);
  textAlign(CENTER, CENTER);
  colors.push([color(255), color(0)]);
  colors.push([color(0), color(255)]);
  colors.push([color(255), color(255, 0, 0)]);
  colors.push([color(0), color(0, 255, 0)]);
  colors.push([color(255), color(0, 0, 255)]);
  colors.push([color(0), color(255, 255, 0)]);
  colors.push([color(255), color(255, 0, 255)]);
  colors.push([color(0), color(0, 255, 255)]);
  colors.push([color(0), color(192)]);
  colors.push([color(255), color(64)]);
  ref = range(31);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    buttons.push(new Button(i + 1, 30 + 60 * (i % 3), 30 + 60 * (int(i / 3)), 50, 50));
  }
  ref1 = _.sortBy(rooms);
  for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
    room = ref1[i];
    buttons.push(new Button(room, 350, 30 + 60 * i, 300, 50, false, i));
  }
  ref2 = _.sortBy(namn.split('\n'));
  results = [];
  for (l = 0, len2 = ref2.length; l < len2; l++) {
    name = ref2[l];
    room = _.sample(rooms);
    deltagare[name] = new Deltagare(name, room, _.random(1, 31));
    results.push((function() {
      var len3, m, results1;
      results1 = [];
      for (m = 0, len3 = buttons.length; m < len3; m++) {
        button = buttons[m];
        if (button.text === room) {
          results1.push(button.b += 1);
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    })());
  }
  return results;
};

draw = function() {
  var button, j, k, len, len1, person, results, results1;
  background(128);
  if (state === 0) {
    results = [];
    for (j = 0, len = buttons.length; j < len; j++) {
      button = buttons[j];
      results.push(button.draw());
    }
    return results;
  } else {
    results1 = [];
    for (k = 0, len1 = persons.length; k < len1; k++) {
      person = persons[k];
      results1.push(person.draw());
    }
    return results1;
  }
};

mousePressed = function() {
  var button, delt, filter, i, j, k, key, len, len1, namn, person, results, results1;
  if (state === 0) {
    results = [];
    for (j = 0, len = buttons.length; j < len; j++) {
      button = buttons[j];
      if (button.pressed(mouseX, mouseY)) {
        state = 1;
        filter = button.text;
        persons = [];
        results.push((function() {
          var results1;
          results1 = [];
          for (key in deltagare) {
            delt = deltagare[key];
            if (delt.rum === filter || delt.dag === filter) {
              i = persons.length;
              results1.push(persons.push(new Button(delt.namn, 60 + 155 * (i % 4), 30 + 60 * int(i / 4), 150, 50, delt.present)));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })());
      } else {
        results.push(void 0);
      }
    }
    return results;
  } else {
    state = 0;
    results1 = [];
    for (k = 0, len1 = persons.length; k < len1; k++) {
      person = persons[k];
      if (person.pressed(mouseX, mouseY)) {
        namn = person.text;
        delt = deltagare[namn];
        delt.present = !delt.present;
        results1.push((function() {
          var l, len2, results2;
          results2 = [];
          for (l = 0, len2 = buttons.length; l < len2; l++) {
            button = buttons[l];
            if (delt.rum === button.text) {
              if (delt.present) {
                results2.push(button.a += 1);
              } else {
                results2.push(button.a -= 1);
              }
            } else {
              results2.push(void 0);
            }
          }
          return results2;
        })());
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\004-inpassering\sketch.coffee